// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { Voucher } from "./types/titan/reward/voucher";
import { QueryShowExtractedVoucherResponse } from "./types/titan/reward/query";
import { QueryShowUnextractedVoucherResponse } from "./types/titan/reward/query";
import { MsgUpdateParams } from "./types/titan/reward/tx";
import { MsgExtractVoucherResponse } from "./types/titan/reward/tx";
import { QueryShowUnextractedVoucherRequest } from "./types/titan/reward/query";
import { QueryListUnextractedVoucherRequest } from "./types/titan/reward/query";
import { GenesisState } from "./types/titan/reward/genesis";
import { MsgCreateVoucherResponse } from "./types/titan/reward/tx";
import { QueryParamsRequest } from "./types/titan/reward/query";
import { QueryShowExtractedVoucherRequest } from "./types/titan/reward/query";
import { MsgExtractVoucher } from "./types/titan/reward/tx";
import { QueryParamsResponse } from "./types/titan/reward/query";
import { QueryListExtractedVoucherResponse } from "./types/titan/reward/query";
import { QueryListUnextractedVoucherResponse } from "./types/titan/reward/query";
import { MsgCreateVoucher } from "./types/titan/reward/tx";
import { Params } from "./types/titan/reward/params";
import { MsgUpdateParamsResponse } from "./types/titan/reward/tx";
import { QueryListExtractedVoucherRequest } from "./types/titan/reward/query";


export { Voucher, QueryShowExtractedVoucherResponse, QueryShowUnextractedVoucherResponse, MsgUpdateParams, MsgExtractVoucherResponse, QueryShowUnextractedVoucherRequest, QueryListUnextractedVoucherRequest, GenesisState, MsgCreateVoucherResponse, QueryParamsRequest, QueryShowExtractedVoucherRequest, MsgExtractVoucher, QueryParamsResponse, QueryListExtractedVoucherResponse, QueryListUnextractedVoucherResponse, MsgCreateVoucher, Params, MsgUpdateParamsResponse, QueryListExtractedVoucherRequest };

type sendVoucherParams = {
  value: Voucher,
  fee?: StdFee,
  memo?: string
};

type sendQueryShowExtractedVoucherResponseParams = {
  value: QueryShowExtractedVoucherResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryShowUnextractedVoucherResponseParams = {
  value: QueryShowUnextractedVoucherResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgExtractVoucherResponseParams = {
  value: MsgExtractVoucherResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryShowUnextractedVoucherRequestParams = {
  value: QueryShowUnextractedVoucherRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryListUnextractedVoucherRequestParams = {
  value: QueryListUnextractedVoucherRequest,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVoucherResponseParams = {
  value: MsgCreateVoucherResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryShowExtractedVoucherRequestParams = {
  value: QueryShowExtractedVoucherRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgExtractVoucherParams = {
  value: MsgExtractVoucher,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryListExtractedVoucherResponseParams = {
  value: QueryListExtractedVoucherResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryListUnextractedVoucherResponseParams = {
  value: QueryListUnextractedVoucherResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVoucherParams = {
  value: MsgCreateVoucher,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryListExtractedVoucherRequestParams = {
  value: QueryListExtractedVoucherRequest,
  fee?: StdFee,
  memo?: string
};


type voucherParams = {
  value: Voucher,
};

type queryShowExtractedVoucherResponseParams = {
  value: QueryShowExtractedVoucherResponse,
};

type queryShowUnextractedVoucherResponseParams = {
  value: QueryShowUnextractedVoucherResponse,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgExtractVoucherResponseParams = {
  value: MsgExtractVoucherResponse,
};

type queryShowUnextractedVoucherRequestParams = {
  value: QueryShowUnextractedVoucherRequest,
};

type queryListUnextractedVoucherRequestParams = {
  value: QueryListUnextractedVoucherRequest,
};

type genesisStateParams = {
  value: GenesisState,
};

type msgCreateVoucherResponseParams = {
  value: MsgCreateVoucherResponse,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryShowExtractedVoucherRequestParams = {
  value: QueryShowExtractedVoucherRequest,
};

type msgExtractVoucherParams = {
  value: MsgExtractVoucher,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryListExtractedVoucherResponseParams = {
  value: QueryListExtractedVoucherResponse,
};

type queryListUnextractedVoucherResponseParams = {
  value: QueryListUnextractedVoucherResponse,
};

type msgCreateVoucherParams = {
  value: MsgCreateVoucher,
};

type paramsParams = {
  value: Params,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type queryListExtractedVoucherRequestParams = {
  value: QueryListExtractedVoucherRequest,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendVoucher({ value, fee, memo }: sendVoucherParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendVoucher: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.voucher({ value: Voucher.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendVoucher: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryShowExtractedVoucherResponse({ value, fee, memo }: sendQueryShowExtractedVoucherResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryShowExtractedVoucherResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryShowExtractedVoucherResponse({ value: QueryShowExtractedVoucherResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryShowExtractedVoucherResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryShowUnextractedVoucherResponse({ value, fee, memo }: sendQueryShowUnextractedVoucherResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryShowUnextractedVoucherResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryShowUnextractedVoucherResponse({ value: QueryShowUnextractedVoucherResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryShowUnextractedVoucherResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgExtractVoucherResponse({ value, fee, memo }: sendMsgExtractVoucherResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgExtractVoucherResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgExtractVoucherResponse({ value: MsgExtractVoucherResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgExtractVoucherResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryShowUnextractedVoucherRequest({ value, fee, memo }: sendQueryShowUnextractedVoucherRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryShowUnextractedVoucherRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryShowUnextractedVoucherRequest({ value: QueryShowUnextractedVoucherRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryShowUnextractedVoucherRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryListUnextractedVoucherRequest({ value, fee, memo }: sendQueryListUnextractedVoucherRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryListUnextractedVoucherRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryListUnextractedVoucherRequest({ value: QueryListUnextractedVoucherRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryListUnextractedVoucherRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVoucherResponse({ value, fee, memo }: sendMsgCreateVoucherResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVoucherResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVoucherResponse({ value: MsgCreateVoucherResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVoucherResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryShowExtractedVoucherRequest({ value, fee, memo }: sendQueryShowExtractedVoucherRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryShowExtractedVoucherRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryShowExtractedVoucherRequest({ value: QueryShowExtractedVoucherRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryShowExtractedVoucherRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgExtractVoucher({ value, fee, memo }: sendMsgExtractVoucherParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgExtractVoucher: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgExtractVoucher({ value: MsgExtractVoucher.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgExtractVoucher: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryListExtractedVoucherResponse({ value, fee, memo }: sendQueryListExtractedVoucherResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryListExtractedVoucherResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryListExtractedVoucherResponse({ value: QueryListExtractedVoucherResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryListExtractedVoucherResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryListUnextractedVoucherResponse({ value, fee, memo }: sendQueryListUnextractedVoucherResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryListUnextractedVoucherResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryListUnextractedVoucherResponse({ value: QueryListUnextractedVoucherResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryListUnextractedVoucherResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVoucher({ value, fee, memo }: sendMsgCreateVoucherParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVoucher: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVoucher({ value: MsgCreateVoucher.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVoucher: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryListExtractedVoucherRequest({ value, fee, memo }: sendQueryListExtractedVoucherRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryListExtractedVoucherRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryListExtractedVoucherRequest({ value: QueryListExtractedVoucherRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryListExtractedVoucherRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		voucher({ value }: voucherParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.Voucher", value: Voucher.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Voucher: Could not create message: ' + e.message)
			}
		},
		
		queryShowExtractedVoucherResponse({ value }: queryShowExtractedVoucherResponseParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryShowExtractedVoucherResponse", value: QueryShowExtractedVoucherResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryShowExtractedVoucherResponse: Could not create message: ' + e.message)
			}
		},
		
		queryShowUnextractedVoucherResponse({ value }: queryShowUnextractedVoucherResponseParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryShowUnextractedVoucherResponse", value: QueryShowUnextractedVoucherResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryShowUnextractedVoucherResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgExtractVoucherResponse({ value }: msgExtractVoucherResponseParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.MsgExtractVoucherResponse", value: MsgExtractVoucherResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgExtractVoucherResponse: Could not create message: ' + e.message)
			}
		},
		
		queryShowUnextractedVoucherRequest({ value }: queryShowUnextractedVoucherRequestParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryShowUnextractedVoucherRequest", value: QueryShowUnextractedVoucherRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryShowUnextractedVoucherRequest: Could not create message: ' + e.message)
			}
		},
		
		queryListUnextractedVoucherRequest({ value }: queryListUnextractedVoucherRequestParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryListUnextractedVoucherRequest", value: QueryListUnextractedVoucherRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryListUnextractedVoucherRequest: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVoucherResponse({ value }: msgCreateVoucherResponseParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.MsgCreateVoucherResponse", value: MsgCreateVoucherResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVoucherResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryShowExtractedVoucherRequest({ value }: queryShowExtractedVoucherRequestParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryShowExtractedVoucherRequest", value: QueryShowExtractedVoucherRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryShowExtractedVoucherRequest: Could not create message: ' + e.message)
			}
		},
		
		msgExtractVoucher({ value }: msgExtractVoucherParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.MsgExtractVoucher", value: MsgExtractVoucher.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgExtractVoucher: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryListExtractedVoucherResponse({ value }: queryListExtractedVoucherResponseParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryListExtractedVoucherResponse", value: QueryListExtractedVoucherResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryListExtractedVoucherResponse: Could not create message: ' + e.message)
			}
		},
		
		queryListUnextractedVoucherResponse({ value }: queryListUnextractedVoucherResponseParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryListUnextractedVoucherResponse", value: QueryListUnextractedVoucherResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryListUnextractedVoucherResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVoucher({ value }: msgCreateVoucherParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.MsgCreateVoucher", value: MsgCreateVoucher.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVoucher: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryListExtractedVoucherRequest({ value }: queryListExtractedVoucherRequestParams): EncodeObject {
			try {
				return { typeUrl: "/titan.reward.QueryListExtractedVoucherRequest", value: QueryListExtractedVoucherRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryListExtractedVoucherRequest: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			TitanReward: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;